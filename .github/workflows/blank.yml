# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
  SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
  SPOTIFY_REFRESH_TOKEN: ${{ secrets.SPOTIFY_REFRESH_TOKEN }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      
      - name: Generate Access Token
        id: spotifyWebRes
        run: |
          echo 'spotifyWebResJSON<<EOF' >> $GITHUB_ENV
          
          curl -X POST "https://accounts.spotify.com/api/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=authorization_code&code=${{ secrets.SPOTIFY_REFRESH_TOKEN }}&redirect_uri=http://127.0.0.1:5173/spotify-refresh-token&client_id=${{ secrets.SPOTIFY_CLIENT_ID }}&client_secret=${{ secrets.SPOTIFY_CLIENT_SECRET }}" >> $GITHUB_ENV
          
          echo 'EOF' >> $GITHUB_ENV
      
      # Echo spotifyRes 
      - name: Show spotify access token
        run: |
          echo ${{ env.spotifyWebResJSON }}
      
      # Echo spotifyRes 
      - name: Show spotify refresh token
        run: |
          echo ${{ env.spotifyWebResJSON }}
          
#       - name: Get key_id
#         id: spotifyRefreshTokenKeys
#         run: |
#           curl \
#           -H "Accept: application/vnd.github+json" \
#           -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
#           -H "X-GitHub-Api-Version: 2022-11-28" \
#           https://api.github.com/repos/IzzatHaikal/WorkflowTest/actions/secrets/public-key
      
      # Create Github Secret Action
      - name: Update SPOTIFY_REFRESH_TOKEN
        # You may pin to the exact commit or the version.
        # uses: gliech/create-github-secret-action@ea87807ab20663b30a1a2d14d7f6dd9490b1e7a1
        uses: gliech/create-github-secret-action@v1.4.10
        with:
          # Name of the secret that you want to create/update
          name: SPOTIFY_REFRESH_TOKEN
          # Value of the secret that you want to create/update
          value: ${{ steps.accessTokenRes.outputs.request_token }}
          # Personal access token with permission to modify repository or organization secrets
          pa_token: ${{ secrets.WT_PERSONAL_TOKEN }}
      
      # Create Github Secret Action
      - name: Update SPOTIFY_ACCESS_TOKEN
        # You may pin to the exact commit or the version.
        # uses: gliech/create-github-secret-action@ea87807ab20663b30a1a2d14d7f6dd9490b1e7a1
        uses: gliech/create-github-secret-action@v1.4.10
        with:
          # Name of the secret that you want to create/update
          name: SPOTIFY_ACCESS_TOKEN
          # Value of the secret that you want to create/update
          value: ${{ steps.accessTokenRes.outputs.access_token }}
          # Personal access token with permission to modify repository or organization secrets
          pa_token: ${{ secrets.WT_PERSONAL_TOKEN }}
      
#       # Echo spotifyRes 
#       - name: Show Response
#         run: |
#           echo ${{ steps.spotifyRefreshTokenKeys.outputs.key_id }}
      
#       - name: Update Secret
#         run: |
#           curl -X PUT \
#           -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
#           -H "Content-Type: application/json" \
#           -d '{ "encrypted_value": "${{ steps.accessTokenRes.outputs.refresh_token }}", "key_id": "<your_key_id>"} }' \
#           https://api.github.com/repos/IzzatHaikal/WorkflowTest/actions/secrets/SPOTIFY_REFRESH_TOKEN
      
      # Spotify api short_term range
      - name: HTTP Request Action
        id: spotifyRes
      # You may pin to the exact commit or the version.
      # uses: fjogeleit/http-request-action@4ae1dfba856bfb530598ebb818f204befbb24cda
        uses: fjogeleit/http-request-action@v1.13.0
        with:
          # Request URL
          url: 'https://api.spotify.com/v1/me/top/tracks?limit=5&time_range=long_term'
          # Request Method
          method: 'GET'
          # Bearer Authentication Token
          bearerToken: "${{ secrets.SPOTIFY_ACCESS_TOKEN }}"
          
      # Echo spotifyRes 
      - name: Show Response
        run: |
          echo ${{ steps.spotifyRes.outputs.response }}
          echo ${{ steps.spotifyRes.outputs.headers }}
          echo ${{ fromJson(steps.spotifyRes.outputs.response).limit }}
      
      - name: Get User's Top Tracks
        run: |
          curl -X GET "https://api.spotify.com/v1/me/top/tracks?limit=5" -H "Authorization: Bearer ${{ secrets.SPOTIFY_ACCESS_TOKEN }}"
        id: top_tracks

      - name: Log User's Top Tracks
        run: |
          echo "Top Tracks:"
          echo "${{ toJson(steps.top_tracks.outputs.body) }}"
      
      # Read README file
      - name: Read file
        id: readmeFile
      # You may pin to the exact commit or the version.
      # uses: juliangruber/read-file-action@02bbba9876a8f870efd4ad64e3b9088d3fb94d4b
        uses: juliangruber/read-file-action@v1.1.6
        with:
          # File path
          path: README.md
        
      # Echo README file
      - name: Echo README file
        run: echo "${{ steps.readmeFile.outputs.content }}"

  
