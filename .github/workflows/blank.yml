# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
  SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
  SPOTIFY_REFRESH_TOKEN: ${{ secrets.SPOTIFY_REFRESH_TOKEN }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      
#       - name: Generate Access Token
#         id: spotifyWebRes
#         run: |
#           curl -X POST "https://accounts.spotify.com/api/token" \
#           -H "Content-Type: application/x-www-form-urlencoded" \
#           -d "grant_type=authorization_code&code=${{ secrets.SPOTIFY_REFRESH_TOKEN }}&redirect_uri=http://127.0.0.1:5173/spotify-refresh-token&client_id=${{ secrets.SPOTIFY_CLIENT_ID }}&client_secret=${{ secrets.SPOTIFY_CLIENT_SECRET }}" > res.json      
#           echo "spotifyWebResRefreshToken= $(jq -r '.refresh_token' res.json)" >> $GITHUB_ENV
#           echo "spotifyWebResAccessToken= $(jq -r '.access_token' res.json)" >> $GITHUB_ENV
      
#       # unmasked access token
#       - name: Generate Refreshed Access Token
#         id: spotifyWebResRefreshed
#         run: |
#           curl -X POST "https://accounts.spotify.com/api/token" \
#           -H "Content-Type: application/x-www-form-urlencoded" \
#           -d "grant_type=refresh_token&refresh_token=${{ secrets.SPOTIFY_REFRESH_TOKEN }}&client_id=${{ secrets.SPOTIFY_CLIENT_ID }}&client_secret=${{ secrets.SPOTIFY_CLIENT_SECRET }}" > resRefreshed.json      
#           echo "spotifyWebResAccessTokenRefreshed= $(jq -r '.access_token' resRefreshed.json)" >> $GITHUB_ENV
      
      # masked access token
      - name: Generate Refreshed Access Token
        id: spotifyWebResRefreshed
        run: |
          curl -X POST "https://accounts.spotify.com/api/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=refresh_token&refresh_token=${{ secrets.SPOTIFY_REFRESH_TOKEN }}&client_id=${{ secrets.SPOTIFY_CLIENT_ID }}&client_secret=${{ secrets.SPOTIFY_CLIENT_SECRET }}" > resRefreshed.json      
          spotifyWebResAccessTokenRefreshed= $(jq -r '.access_token' resRefreshed.json)
          
          echo "::add-mask::$spotifyWebResAccessTokenRefreshed"
          echo spotifyWebResAccessTokenRefreshed=$spotifyWebResAccessTokenRefreshed >> $GITHUB_ENV    
          
          
#       # Echo spotifyRes 
#       - name: Show spotify refresh token
#         run: |
#           echo ${{ env.spotifyWebResRefreshToken }}
      
#       # Echo spotifyRes 
#       - name: Show spotify access token
#         run: |
#           echo ${{ env.spotifyWebResAccessToken }}
      
      # Echo refreshed access token 
      - name: Show spotify refreshed access token (not masked)
        run: |
          echo ${{ env.spotifyWebResAccessTokenRefreshed }}
      
      # Echo refreshed access token 
#       - name: Show spotify refreshed access token (masked)
#         run: |
#           echo "::add-mask::${{ env.spotifyWebResAccessTokenRefreshed }}"
#           echo spotifyWebResAccessTokenRefreshedMasked=${{ env.spotifyWebResAccessTokenRefreshed }} >> $GITHUB_ENV
#           echo ${{ env.spotifyWebResAccessTokenRefreshedMasked }}
          
#       - name: Get key_id
#         id: spotifyRefreshTokenKeys
#         run: |
#           curl \
#           -H "Accept: application/vnd.github+json" \
#           -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
#           -H "X-GitHub-Api-Version: 2022-11-28" \
#           https://api.github.com/repos/IzzatHaikal/WorkflowTest/actions/secrets/public-key
      
#       - name: Update GitHub Secret (SPOTIFY_REFRESH_TOKEN)
#         uses: atomlong/gh-update-secret@master
#         with:
#           name: SPOTIFY_REFRESH_TOKEN
#           value: ${{ env.spotifyWebResRefreshToken }}
#           pa_token: ${{ secrets.WT_PERSONAL_TOKEN }}
          
#       - name: Update GitHub Secret (SPOTIFY_ACCESS_TOKEN)
#         uses: atomlong/gh-update-secret@master
#         with:
#           name: SPOTIFY_ACCESS_TOKEN
#           value: ${{ env.spotifyWebResAccessToken }}
#           pa_token: ${{ secrets.WT_PERSONAL_TOKEN }}
      
      - name: Update GitHub Secret (SPOTIFY_ACCESS_TOKEN Refreshed)
        uses: atomlong/gh-update-secret@master
        with:
          name: SPOTIFY_ACCESS_TOKEN
          value: ${{ env.spotifyWebResAccessTokenRefreshed }}
          pa_token: ${{ secrets.WT_PERSONAL_TOKEN }}
      
#       # Echo spotifyRes 
#       - name: Show Response
#         run: |
#           echo ${{ steps.spotifyRefreshTokenKeys.outputs.key_id }}
      
#       - name: Update Secret
#         run: |
#           curl -X PUT \
#           -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
#           -H "Content-Type: application/json" \
#           -d '{ "encrypted_value": "${{ steps.accessTokenRes.outputs.refresh_token }}", "key_id": "<your_key_id>"} }' \
#           https://api.github.com/repos/IzzatHaikal/WorkflowTest/actions/secrets/SPOTIFY_REFRESH_TOKEN
      
#       # Spotify api long term range
#       - name: HTTP Request Action
#         id: spotifyRes
#       # You may pin to the exact commit or the version.
#       # uses: fjogeleit/http-request-action@4ae1dfba856bfb530598ebb818f204befbb24cda
#         uses: fjogeleit/http-request-action@v1.13.0
#         with:
#           # Request URL
#           url: 'https://api.spotify.com/v1/me/top/tracks?limit=5&time_range=long_term'
#           # Request Method
#           method: 'GET'
#           # Bearer Authentication Token
#           bearerToken: ${{ secrets.SPOTIFY_ACCESS_TOKEN }}
          
#       # Echo spotifyRes 
#       - name: Show Response
#         run: |
#           echo ${{ steps.spotifyRes.outputs.response }}
#           echo ${{ steps.spotifyRes.outputs.headers }}
#           echo ${{ fromJson(steps.spotifyRes.outputs.response).limit }}
      
      - name: Get Users Top Tracks
        run: |
          curl -X GET "https://api.spotify.com/v1/me/top/tracks?limit=5" -H "Authorization: Bearer ${{ env.spotifyWebResAccessTokenRefreshed }}"
        id: top_tracks

      - name: Log User's Top Tracks
        run: |
          echo "Top Tracks:"
          echo "${{ toJson(steps.top_tracks.outputs.body) }}"
      
      # Read README file
      - name: Read file
        id: readmeFile
      # You may pin to the exact commit or the version.
      # uses: juliangruber/read-file-action@02bbba9876a8f870efd4ad64e3b9088d3fb94d4b
        uses: juliangruber/read-file-action@v1.1.6
        with:
          # File path
          path: README.md
        
      # Echo README file
      - name: Echo README file
        run: echo "${{ steps.readmeFile.outputs.content }}"

  
